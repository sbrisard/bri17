kill(all);
load(functs);
verbose_ : false;
print("+--------------------------+");
print("| ELEMENT STIFFNESS MATRIX |");
print("+--------------------------+");
newline();
print("Nomenclature");
print("============");
ndims : 3;
nnodes : 2**ndims;
ndofs : nnodes*ndims;
xyz : firstn([x, y, z], ndims);
abc : firstn([a, b, c], ndims);
uvw : firstn(['u, 'v, 'w], ndims);
print("- coordinates:", xyz);
print("- element sides:", abc);
print("- components of displacement:", uvw);
newline();
print("Numbering of nodes");
print("==================");
newline();
print("This node numbering is slightly unusual, but is more convenient to");
print("implement in a dimension-independent way.");
print("In 2 dimensions:");
newline();
print("  2---4");
print("  |   |");
print("  1---3");
newline();
print("In 3 dimensions");
newline();
print("      4--------8");
print("     /|       /|");
print("    / |      / |");
print("   /  |     /  |");
print("  2--------6 --7");
print("  |  /3    |  / ");
print("  | /      | /  ");
print("  |/       |/   ");
print("  1--------5    ");
/* Create a list of lists of 1D shape functions, then compute the product. */
shape_functions_list : lreduce(
  lambda([L1, L2], create_list(x1*x2, x1, L1, x2, L2)),
  map(lambda([xi], [1-xi, xi]), xyz/abc));

N : transpose(matrix(shape_functions_list));

if ndims = 2 then nodes : [[x=0, y=0], [x=0, y=b], [x=a, y=0], [x=a, y=b]]
else nodes : [[x=0, y=0, z=0], [x=0, y=0, z=c], [x=0, y=b, z=0], [x=0, y=b, z=c], [x=a, y=0, z=0], [x=a, y=0, z=c], [x=a, y=b, z=0], [x=a, y=b, z=c]];

newline();
print("Testing numbering of nodes...");
N_list : list_matrix_entries(N);
expected : ident(nnodes);
actual : apply(matrix, makelist(subst(nodes[i], N_list), i, 1, nnodes));
if actual # expected then error();
kill(N_list, expected, actual);
print("... OK");

dofs_[i, j] := concat(uvw[i], j);
dofs : genmatrix(dofs_, ndims, nnodes);

u : dofs.N;

newline();
print("Testing numbering of dofs...");
u_list : list_matrix_entries(u);
expected : transpose(dofs);
actual : apply(matrix, makelist(subst(nodes[i], u_list), i, 1, nnodes));
if actual # expected then error();
kill(u_list, expected, actual);
print("... OK");

eps_[i, j] := factor((diff(u[i, 1], xyz[j])+diff(u[j, 1], xyz[i]))/2);
eps : genmatrix(eps_, ndims, ndims);

tr_eps : tracematrix(eps);
sig : lame_I*tr_eps*ident(ndims)+2*lame_II*eps;

U : tracematrix(sig.eps)/2;
for i:1 thru ndims do U : integrate(U, xyz[i], 0, abc[i]);

q : makelist(dofs[quotient(i-1, nnodes)+1, remainder(i-1, nnodes)+1], i, 1, ndofs);

Kq_[i, j] := diff(U, q[i]);
Kq : genmatrix(Kq_, ndofs, 1);
K : expand(coefmatrix(list_matrix_entries(Kq), q));
K_I : coeff(K, lame_I);
K_II : coeff(K, lame_II);

res : ratsimp(1/2*transpose(q).(lame_I*K_I+lame_II*K_II).q-U);
if res # 0 then error();

indices_ : makelist(makelist(j, j, (i-1)*nnodes+1, i*nnodes), i, 1, ndims);

newline();
print("Element stiffness matrix");
print("========================");

if verbose_ then block(
  newline(),
  print("The element stiffness matrix is decomposed as follows"),
  newline(),
  print("    K = lame_I * K_I + lame_II * K_II,"),
  newline(),
  print("where lame_I and lame_II are the first and second lame coefficients."),
  newline(),
  print("Blocks of matrix K_I"),
  print("--------------------"),
  newline(),
  for i : 1 thru ndims do for j : 1 thru ndims do block(
    print("K_I(", i, ",", j, ") =",
      apply(submatrix, append(indices_[i], [K_I], indices_[j]))),
    newline()),
  newline(),
  print("Blocks of matrix K_II"),
  print("---------------------"),
  newline(),
  for i : 1 thru ndims do for j : 1 thru ndims do block(
    print("K_II(", i, ",", j, ") =",
      apply(submatrix, append(indices_[i], [K_II], indices_[j]))),
    newline()));

newline();
print("Numerical value of the element stiffness matrix");
print("-----------------------------------------------");
newline();
a_val : 11/10;
b_val : 12/10;
c_val : 13/10;
mu_val : 56/10;
nu_val : 3/10;

print("We use the following numerical values of the parameters");
print("  - a  =", float(a_val));
print("  - b  =", float(b_val));
if ndims = 3 then print("  - c  =", float(c_val));
print("  - mu =", float(mu_val));
print("  - nu =", float(nu_val));
newline();

num_val : [lame_II=mu_val, lame_I=2*mu_val*nu_val/(1-2*nu_val), a=a_val, b=b_val, c=c_val];
K_num : float(subst(num_val, K));

text : "";
for i:1 thru ndofs do for j:1 thru ndofs do text : concat(text, K_num[i, j], ", ");

print("Row-major list of coefficients of the element stiffness matrix");
newline();
sprint(text);