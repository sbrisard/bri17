kill(all);
load(functs);
print("+--------------------------+");
print("| ELEMENT STIFFNESS MATRIX |");
print("+--------------------------+");
print("");
print("NOMENCLATURE");
print("------------");
ndims : 2;
nnodes : 2**ndims;
ndofs : nnodes*ndims;
xyz : firstn([x, y, z], ndims);
abc : firstn([a, b, c], ndims);
uvw : firstn(['u, 'v, 'w], ndims);
print("- coordinates:", xyz);
print("- element sides:", abc);
print("- components of displacement:", uvw);
print("");
print("NUMBERING OF NODES");
print("------------------");
print("");
print("This node numbering is slightly unusual, but is more convenient to");
print("implement in a dimension-independent way.");
print("  2---4");
print("  |   |");
print("  1---3");
/* Create a list of lists of 1D shape functions, then compute the product. */
shape_functions_list : lreduce(
  lambda([L1, L2], create_list(x1*x2, x1, L1, x2, L2)),
  map(lambda([xi], [1-xi, xi]), xyz/abc));

N : transpose(matrix(shape_functions_list));

node1 : [x=0, y=0];
node2 : [x=0, y=b];
node3 : [x=a, y=0];
node4 : [x=a, y=b];

if transpose(subst(node1, N)) # matrix([1, 0, 0, 0]) then error();
if transpose(subst(node2, N)) # matrix([0, 1, 0, 0]) then error();
if transpose(subst(node3, N)) # matrix([0, 0, 1, 0]) then error();
if transpose(subst(node4, N)) # matrix([0, 0, 0, 1]) then error();

dofs_[i, j] := concat(uvw[i], j);
dofs : genmatrix(dofs_, ndims, nnodes);

u : dofs.N;

if subst(node1, u) # transpose(matrix([u1, v1])) then error();
if subst(node2, u) # transpose(matrix([u2, v2])) then error();
if subst(node3, u) # transpose(matrix([u3, v3])) then error();
if subst(node4, u) # transpose(matrix([u4, v4])) then error();

eps_[i, j] := factor((diff(u[i, 1], xyz[j])+diff(u[j, 1], xyz[i]))/2);
eps : genmatrix(eps_, ndims, ndims);

tr_eps : tracematrix(eps);
sig : lame_I*tr_eps*ident(ndims)+2*lame_II*eps;

U : tracematrix(sig.eps)/2;
for i:1 thru ndims do U : integrate(U, xyz[i], 0, abc[i]);

q : makelist(dofs[quotient(i-1, nnodes)+1, remainder(i-1, nnodes)+1], i, 1, ndofs);

Kq_[i, j] := diff(U, q[i]);
Kq : genmatrix(Kq_, ndofs, 1);
K : expand(coefmatrix(list_matrix_entries(Kq), q));
K_I : coeff(K, lame_I);
K_II : coeff(K, lame_II);

res : ratsimp(1/2*transpose(q).(lame_I*K_I+lame_II*K_II).q-U);
if res # 0 then error();

print("Blocks of matrix K_I");
print("---------------------");
print("Upper-left block");
print("");
print(submatrix(5, 6, 7, 8, K_I, 5, 6, 7, 8));
print("");
print("Upper-right block");
print("");
print(submatrix(5, 6, 7, 8, K_I, 1, 2, 3, 4));
print("");
print("Lower-left block");
print("");
print(submatrix(1, 2, 3, 4, K_I, 5, 6, 7, 8));
print("");
print("Lower-right block");
print("");
print(submatrix(1, 2, 3, 4, K_I, 1, 2, 3, 4));

print("");
print("Blocks of matrix K_II");
print("---------------------");
print("Upper-left block");
print("");
print(submatrix(5, 6, 7, 8, K_II, 5, 6, 7, 8));
print("");
print("Upper-right block");
print("");
print(submatrix(5, 6, 7, 8, K_II, 1, 2, 3, 4));
print("");
print("Lower-left block");
print("");
print(submatrix(1, 2, 3, 4, K_II, 5, 6, 7, 8));
print("");
print("Lower-right block");
print("");
print(submatrix(1, 2, 3, 4, K_II, 1, 2, 3, 4));

print("");
print("Some numerical values");
print("---------------------");
print("");
nu_val : 3/10;
mu_val : 1;
num_val : [lame_II=mu_val, lame_I=2*mu_val*nu_val/(1-2*nu_val), a=11/10, b=12/10];
K_num : float(subst(num_val, K));

text : "";
for i:1 thru ndofs do for j:1 thru ndofs do text : concat(text, K_num[i, j], ", ");

sprint(text);